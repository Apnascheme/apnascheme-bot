import express from 'express';
import dotenv from 'dotenv';
import axios from 'axios';


dotenv.config();
const app = express();
const PORT = process.env.PORT || 10000;

app.use(express.json());


const LANGUAGE_QUESTIONS = {
  HI: {
    welcome: `Namaste! Main hoon ApnaScheme ‚Äì aapka digital dost üáÆüá≥
Main aapko batata hoon kaunsi Sarkari Yojana aapke liye hai ‚Äì
bina agent, bina form, bina confusion.

üó£Ô∏è Apni bhaasha chunein:
üîò ‡§π‡§ø‡§Ç‡§¶‡•Ä üîò English üîò ‡§Æ‡§∞‡§æ‡§†‡•Ä`,
    questions: [
      { key: 'gender', text: 'Aapka gender kya hai? (üë®‚Äçü¶∞ Purush, üë© Mahila, üßï Anya)' },
      { key: 'age', text: 'Aapki age kitni hai? (Numeric mein likhein eg. 18)' },
      { key: 'state', text: 'Aapka rajya kaunsa hai? (e.g. Maharashtra)' },
      { key: 'caste', text: 'Aap SC/ST/OBC/EWS category mein aate ho kya? (Haan/Nahi)' },
      { key: 'occupation', text: 'Aapka current occupation kya hai? (Student, Employed, Unemployed...)' },
      { key: 'income', text: 'Aapka ghar ka saalana aay kya hai? (‚Çπ mein likho)' },
      { key: 'guardian_income', text: 'Aapke guardian ka annual income kitna hai? (‚Çπ mein likho)' },
      { key: 'bank', text: 'Kya aapka bank account khula hai? (Haan/Nahi)' },
      { key: 'ration', text: 'Kya aapke paas ration card hai? (Haan/Nahi)' },
    ],
  },
  EN: {
    welcome: `Hello! I am ApnaScheme ‚Äì your digital guide üáÆüá≥
I‚Äôll help you find which Government Schemes you‚Äôre eligible for ‚Äì
no agents, no forms, no confusion.

üó£Ô∏è Choose your language:
üîò ‡§π‡§ø‡§Ç‡§¶‡•Ä üîò English üîò ‡§Æ‡§∞‡§æ‡§†‡•Ä`,
    questions: [
      { key: 'gender', text: 'What is your gender? (Male/Female/Other)' },
      { key: 'age', text: 'What is your age? (e.g. 25)' },
      { key: 'state', text: 'Which state do you live in? (e.g. Maharashtra)' },
      { key: 'caste', text: 'Do you belong to SC/ST/OBC/EWS category? (Yes/No)' },
      { key: 'occupation', text: 'What is your current occupation? (Student, Employed, Unemployed...)' },
      { key: 'income', text: 'What is your annual household income? (in ‚Çπ)' },
      { key: 'guardian_income', text: 'What is your guardian‚Äôs annual income? (in ‚Çπ)' },
      { key: 'bank', text: 'Do you have a bank account? (Yes/No)' },
      { key: 'ration', text: 'Do you have a ration card? (Yes/No)' },
    ],
  },
  MR: {
    welcome: `‡§®‡§Æ‡§∏‡•ç‡§ï‡§æ‡§∞! ‡§Æ‡•Ä ‡§Ü‡§π‡•á ApnaScheme ‚Äì ‡§§‡•Å‡§Æ‡§ö‡§æ ‡§°‡§ø‡§ú‡§ø‡§ü‡§≤ ‡§∏‡§æ‡§•‡•Ä üáÆüá≥
‡§Æ‡•Ä ‡§§‡•Å‡§Æ‡•ç‡§π‡§æ‡§≤‡§æ ‡§∏‡§æ‡§Ç‡§ó‡•á‡§≤ ‡§ï‡•Ä ‡§ï‡•ã‡§£‡§§‡•Ä ‡§∂‡§æ‡§∏‡§ï‡•Ä‡§Ø ‡§Ø‡•ã‡§ú‡§®‡§æ ‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§∏‡§æ‡§†‡•Ä ‡§Ü‡§π‡•á ‚Äì
‡§®‡•ã ‡§è‡§ú‡§Ç‡§ü, ‡§®‡•ã ‡§´‡•â‡§∞‡•ç‡§Æ, ‡§®‡•ã ‡§ó‡•ã‡§Ç‡§ß‡§≥.

üó£Ô∏è ‡§Ü‡§™‡§≤‡•Ä ‡§≠‡§æ‡§∑‡§æ ‡§®‡§ø‡§µ‡§°‡§æ:
üîò ‡§π‡§ø‡§Ç‡§¶‡•Ä üîò English üîò ‡§Æ‡§∞‡§æ‡§†‡•Ä`,
    questions: [
      { key: 'gender', text: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§≤‡§ø‡§Ç‡§ó ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á? (‡§™‡•Å‡§∞‡•Å‡§∑/‡§∏‡•ç‡§§‡•ç‡§∞‡•Ä/‡§á‡§§‡§∞)' },
      { key: 'age', text: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§µ‡§Ø ‡§ï‡§ø‡§§‡•Ä ‡§Ü‡§π‡•á? (‡§â‡§¶‡§æ. ‡•®‡•´)' },
      { key: 'state', text: '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä ‡§ï‡•ã‡§£‡§§‡•ç‡§Ø‡§æ ‡§∞‡§æ‡§ú‡•ç‡§Ø‡§æ‡§§ ‡§∞‡§æ‡§π‡§§‡§æ? (‡§â‡§¶‡§æ. ‡§Æ‡§π‡§æ‡§∞‡§æ‡§∑‡•ç‡§ü‡•ç‡§∞)' },
      { key: 'caste', text: '‡§§‡•Å‡§Æ‡•ç‡§π‡•Ä SC/ST/OBC/EWS ‡§Æ‡§ß‡•Ç‡§® ‡§Ü‡§π‡§æ‡§§ ‡§ï‡§æ? (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)' },
      { key: 'occupation', text: '‡§§‡•Å‡§Æ‡§ö‡§æ ‡§µ‡•ç‡§Ø‡§µ‡§∏‡§æ‡§Ø ‡§ï‡§æ‡§Ø ‡§Ü‡§π‡•á? (‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•Ä, ‡§®‡•ã‡§ï‡§∞‡•Ä, ‡§¨‡•á‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞...)' },
      { key: 'income', text: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§ø‡§§‡•Ä ‡§Ü‡§π‡•á? (‚Çπ ‡§Æ‡§ß‡•ç‡§Ø‡•á)' },
      { key: 'guardian_income', text: '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ ‡§™‡§æ‡§≤‡§ï‡§æ‡§Ç‡§ö‡•á ‡§µ‡§æ‡§∞‡•ç‡§∑‡§ø‡§ï ‡§â‡§§‡•ç‡§™‡§®‡•ç‡§® ‡§ï‡§ø‡§§‡•Ä ‡§Ü‡§π‡•á? (‚Çπ ‡§Æ‡§ß‡•ç‡§Ø‡•á)' },
      { key: 'bank', text: '‡§§‡•Å‡§Æ‡§ö‡•á ‡§¨‡§Å‡§ï ‡§ñ‡§æ‡§§‡•á ‡§Ü‡§π‡•á ‡§ï‡§æ? (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)' },
      { key: 'ration', text: '‡§§‡•Å‡§Æ‡§ö‡•ç‡§Ø‡§æ‡§ï‡§°‡•á ‡§∞‡•á‡§∂‡§® ‡§ï‡§æ‡§∞‡•ç‡§° ‡§Ü‡§π‡•á ‡§ï‡§æ? (‡§π‡•ã‡§Ø/‡§®‡§æ‡§π‡•Ä)' },
    ],
  },
};

app.post('/gupshup', async (req, res) => {
  const incoming = req.body.payload?.payload;
  const phone = incoming?.sender?.phone;
  const message = incoming?.payload?.text?.toLowerCase().trim();
  if (!phone || !message) return res.sendStatus(200);

  const userRef = db.collection('users').doc(phone);
  let userData = (await userRef.get()).data() || {};

  // Set language
  if (!userData.language) {
    if (message.includes('hindi') || message.includes('‡§π‡§ø‡§Ç‡§¶‡•Ä')) userData.language = 'HI';
    else if (message.includes('english') || message.includes('eng')) userData.language = 'EN';
    else if (message.includes('marathi') || message.includes('‡§Æ‡§∞‡§æ‡§†‡•Ä')) userData.language = 'MR';
    else {
      await sendMessage(phone, LANGUAGE_QUESTIONS.HI.welcome);
      return res.sendStatus(200);
    }
    userData.answers = {};
    userData.step = 0;
    await userRef.set(userData);
  }

  const lang = userData.language;
  const questions = LANGUAGE_QUESTIONS[lang].questions;

  // Store answer to last step
  if (userData.step > 0) {
    const lastKey = questions[userData.step - 1].key;
    userData.answers[lastKey] = message;
  }

  // Skip logic
  if (questions[userData.step]?.key === 'income' && ['student', 'unemployed', '‡§µ‡§ø‡§¶‡•ç‡§Ø‡§æ‡§∞‡•ç‡§•‡•Ä', '‡§¨‡•á‡§∞‡•ã‡§ú‡§ó‡§æ‡§∞'].includes(userData.answers['occupation']?.toLowerCase())) {
    userData.step++; // skip income
  }
  if (questions[userData.step]?.key === 'bank' && parseInt(userData.answers['age']) < 18) {
    userData.step++; // skip bank
  }

  // Ask next question
  if (userData.step < questions.length) {
    const nextQ = questions[userData.step].text;
    await sendMessage(phone, nextQ);
    userData.step++;
    await userRef.set(userData);
  } else {
    await sendMessage(phone, '‚úÖ Thank you! We are checking schemes you are eligible for...');
    // You can add further logic here for eligibility check/payment etc.
  }

  res.sendStatus(200);
});

async function sendMessage(to, msg) {
  await axios.post(
    'https://api.gupshup.io/sm/api/v1/msg',
    new URLSearchParams({
      channel: 'whatsapp',
      source: process.env.GUPSHUP_PHONE_NUMBER,
      destination: to,
      message: JSON.stringify({ type: 'text', text: msg }),
    }),
    {
      headers: {
        'apikey': process.env.GUPSHUP_APP_TOKEN,
        'Content-Type': 'application/x-www-form-urlencoded',
      },
    }
  );
}

app.listen(PORT, () => {
  console.log(`‚úÖ ApnaScheme bot server running on port ${PORT}`);
});
